;;; 256ca.el

;; Copyright (C) 2014 Joseph Corneli

;; Maintainer: holtzermann17@gmail.com
;; Keywords: science, simulation

;; This file is NOT part of GNU Emacs.

;; GNU Emacs is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 2 of the License, or
;; (at your option) any later version.

;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This code creates "meta-" cellular automata spacetime diagrams.
;; That is, the CA's evolve their own rules locally, rather evolving
;; an abstract state according to one global rule.

;; Previous work with CAs feature evolving global rules.  This is the
;; first work that I am aware of that evolves the rule locally.

;; Next up: add an abstract "phenotype" on top of or interacting with
;; the "genotype."

;;; Code:

(require 'hexrgb)

;;; Convenience

(defvar hexcolour-keywords
   '(("#[abcdef[:digit:]]\\{6\\}"
      (0 (put-text-property (match-beginning 0)
                            (match-end 0)
			    'face (list :background 
				        (match-string-no-properties 0)))))))

(defun hexcolour-add-to-font-lock ()
  (font-lock-add-keywords nil hexcolour-keywords))

(add-hook 'emacs-lisp-mode-hook 'hexcolour-add-to-font-lock)

;;;

(defvar truth-table-3 '("000" "001" "010" "100" "011" "101" "110" "111"))

(defvar truth-table-8
  '(("00000000" "!" "#000000")
    ("00000001" "#" "#800000")
    ("00000010" "$" "#008000")
    ("00000100" "%" "#808000")
    ("00000011" "&" "#000080")
    ("00000101" "[" "#800080")
    ("00000110" "]" "#008080")
    ("00000111" "*" "#c0c0c0")
    ("00001000" "0" "#808080")
    ("00001001" "1" "#ff0000")
    ("00001010" "2" "#00ff00")
    ("00001100" "3" "#ffff00")
    ("00001011" "4" "#0000ff")
    ("00001101" "5" "#ff00ff")
    ("00001110" "6" "#00ffff")
    ("00001111" "7" "#ffffff")
    ("00010000" "8" "#000000")
    ("00010001" "9" "#00005f")
    ("00010010" "@" "#000087")
    ("00010100" "A" "#0000af")
    ("00010011" "B" "#0000d7")
    ("00010101" "C" "#0000ff")
    ("00010110" "D" "#005f00")
    ("00010111" "E" "#005f5f")
    ("00011000" "F" "#005f87")
    ("00011001" "G" "#005faf")
    ("00011010" "H" "#005fd7")
    ("00011100" "I" "#005fff")
    ("00011011" "J" "#008700")
    ("00011101" "K" "#00875f")
    ("00011110" "L" "#008787")
    ("00011111" "M" "#0087af")
    ("00100000" "N" "#0087d7")
    ("00100001" "O" "#0087ff")
    ("00100010" "P" "#00af00")
    ("00100100" "Q" "#00af5f")
    ("00100011" "R" "#00af87")
    ("00100101" "S" "#00afaf")
    ("00100110" "T" "#00afd7")
    ("00100111" "U" "#00afff")
    ("00101000" "V" "#00d700")
    ("00101001" "W" "#00d75f")
    ("00101010" "X" "#00d787")
    ("00101100" "Y" "#00d7af")
    ("00101011" "Z" "#00d7d7")
    ("00101101" "^" "#00d7ff")
    ("00101110" "`" "#00ff00")
    ("00101111" "a" "#00ff5f")
    ("00110000" "b" "#00ff87")
    ("00110001" "c" "#00ffaf")
    ("00110010" "d" "#00ffd7")
    ("00110100" "e" "#00ffff")
    ("00110011" "f" "#5f0000")
    ("00110101" "g" "#5f005f")
    ("00110110" "h" "#5f0087")
    ("00110111" "i" "#5f00af")
    ("00111000" "j" "#5f00d7")
    ("00111001" "k" "#5f00ff")
    ("00111010" "l" "#5f5f00")
    ("00111100" "m" "#5f5f5f")
    ("00111011" "n" "#5f5f87")
    ("00111101" "o" "#5f5faf")
    ("00111110" "p" "#5f5fd7")
    ("00111111" "q" "#5f5fff")
    ("01000000" "r" "#5f8700")
    ("01000001" "s" "#5f875f")
    ("01000010" "t" "#5f8787")
    ("01000100" "u" "#5f87af")
    ("01000011" "v" "#5f87d7")
    ("01000101" "w" "#5f87ff")
    ("01000110" "x" "#5faf00")
    ("01000111" "y" "#5faf5f")
    ("01001000" "z" "#5faf87")
    ("01001001" "~" "#5fafaf")
    ("01001010" " " "#5fafd7")
    ("01001100" "¡" "#5fafff")
    ("01001011" "¢" "#5fd700")
    ("01001101" "£" "#5fd75f")
    ("01001110" "¤" "#5fd787")
    ("01001111" "¥" "#5fd7af")
    ("01010000" "¦" "#5fd7d7")
    ("01010001" "§" "#5fd7ff")
    ("01010010" "¨" "#5fff00")
    ("01010100" "©" "#5fff5f")
    ("01010011" "ª" "#5fff87")
    ("01010101" "«" "#5fffaf")
    ("01010110" "¬" "#5fffd7")
    ("01010111" "­" "#5fffff")
    ("01011000" "®" "#870000")
    ("01011001" "¯" "#87005f")
    ("01011010" "°" "#870087")
    ("01011100" "±" "#8700af")
    ("01011011" "²" "#8700d7")
    ("01011101" "³" "#8700ff")
    ("01011110" "´" "#875f00")
    ("01011111" "µ" "#875f5f")
    ("01100000" "¶" "#875f87")
    ("01100001" "·" "#875faf")
    ("01100010" "¹" "#875fd7")
    ("01100100" "º" "#875fff")
    ("01100011" "»" "#878700")
    ("01100101" "¼" "#87875f")
    ("01100110" "½" "#878787")
    ("01100111" "¾" "#8787af")
    ("01101000" "¿" "#8787d7")
    ("01101001" "À" "#8787ff")
    ("01101010" "Á" "#87af00")
    ("01101100" "Â" "#87af5f")
    ("01101011" "Ã" "#87af87")
    ("01101101" "Ä" "#87afaf")
    ("01101110" "Å" "#87afd7")
    ("01101111" "Æ" "#87afff")
    ("01110000" "Ç" "#87d700")
    ("01110001" "È" "#87d75f")
    ("01110010" "É" "#87d787")
    ("01110100" "Ê" "#87d7af")
    ("01110011" "Ë" "#87d7d7")
    ("01110101" "Ì" "#87d7ff")
    ("01110110" "Í" "#87ff00")
    ("01110111" "Î" "#87ff5f")
    ("01111000" "Ï" "#87ff87")
    ("01111001" "Ð" "#87ffaf")
    ("01111010" "Ñ" "#87ffd7")
    ("01111100" "Ò" "#87ffff")
    ("01111011" "Ó" "#af0000")
    ("01111101" "Ô" "#af005f")
    ("01111110" "Õ" "#af0087")
    ("01111111" "Ö" "#af00af")
    ("10000000" "×" "#af00d7")
    ("10000001" "Ø" "#af00ff")
    ("10000010" "Ù" "#af5f00")
    ("10000100" "Ú" "#af5f5f")
    ("10000011" "Û" "#af5f87")
    ("10000101" "Ü" "#af5faf")
    ("10000110" "Ý" "#af5fd7")
    ("10000111" "Þ" "#af5fff")
    ("10001000" "ß" "#af8700")
    ("10001001" "à" "#af875f")
    ("10001010" "á" "#af8787")
    ("10001100" "â" "#af87af")
    ("10001011" "ã" "#af87d7")
    ("10001101" "ä" "#af87ff")
    ("10001110" "å" "#afaf00")
    ("10001111" "æ" "#afaf5f")
    ("10010000" "ç" "#afaf87")
    ("10010001" "è" "#afafaf")
    ("10010010" "é" "#afafd7")
    ("10010100" "ê" "#afafff")
    ("10010011" "ë" "#afd700")
    ("10010101" "ì" "#afd75f")
    ("10010110" "í" "#afd787")
    ("10010111" "î" "#afd7af")
    ("10011000" "ï" "#afd7d7")
    ("10011001" "ð" "#afd7ff")
    ("10011010" "ñ" "#afff00")
    ("10011100" "ò" "#afff5f")
    ("10011011" "ó" "#afff87")
    ("10011101" "ô" "#afffaf")
    ("10011110" "õ" "#afffd7")
    ("10011111" "ö" "#afffff")
    ("10100000" "÷" "#d70000")
    ("10100001" "ø" "#d7005f")
    ("10100010" "ù" "#d70087")
    ("10100100" "ú" "#d700af")
    ("10100011" "û" "#d700d7")
    ("10100101" "ü" "#d700ff")
    ("10100110" "ý" "#d75f00")
    ("10100111" "þ" "#d75f5f")
    ("10101000" "ÿ" "#d75f87")
    ("10101001" "ā" "#d75faf")
    ("10101010" "Ă" "#d75fd7")
    ("10101100" "Ą" "#d75fff")
    ("10101011" "Ć" "#d78700")
    ("10101101" "Č" "#d7875f")
    ("10101110" "Ď" "#d78787")
    ("10101111" "Đ" "#d787af")
    ("10110000" "Ę" "#d787d7")
    ("10110001" "Ě" "#d787ff")
    ("10110010" "ī" "#d7af00")
    ("10110100" "Ĺ" "#d7af5f")
    ("10110011" "Ľ" "#d7af87")
    ("10110101" "Ł" "#d7afaf")
    ("10110110" "Ń" "#d7afd7")
    ("10110111" "ņ" "#d7afff")
    ("10111000" "Ň" "#d7d700")
    ("10111001" "Ő" "#d7d75f")
    ("10111010" "Œ" "#d7d787")
    ("10111100" "Ŕ" "#d7d7af")
    ("10111011" "Ř" "#d7d7d7")
    ("10111101" "Ś" "#d7d7ff")
    ("10111110" "Ş" "#d7ff00")
    ("10111111" "Š" "#d7ff5f")
    ("11000000" "Ţ" "#d7ff87")
    ("11000001" "Ť" "#d7ffaf")
    ("11000010" "Ů" "#d7ffd7")
    ("11000100" "Ű" "#d7ffff")
    ("11000011" "Ÿ" "#ff0000")
    ("11000101" "Ź" "#ff005f")
    ("11000110" "Ż" "#ff0087")
    ("11000111" "Ž" "#ff00af")
    ("11001000" "Α" "#ff00d7")
    ("11001001" "Β" "#ff00ff")
    ("11001010" "Γ" "#ff5f00")
    ("11001100" "Δ" "#ff5f5f")
    ("11001011" "Ε" "#ff5f87")
    ("11001101" "Ζ" "#ff5faf")
    ("11001110" "Η" "#ff5fd7")
    ("11001111" "Θ" "#ff5fff")
    ("11010000" "Ι" "#ff8700")
    ("11010001" "Κ" "#ff875f")
    ("11010010" "Λ" "#ff8787")
    ("11010100" "Μ" "#ff87af")
    ("11010011" "Ν" "#ff87d7")
    ("11010101" "Ξ" "#ff87ff")
    ("11010110" "Ο" "#ffaf00")
    ("11010111" "Π" "#ffaf5f")
    ("11011000" "Ρ" "#ffaf87")
    ("11011001" "Σ" "#ffafaf")
    ("11011010" "Τ" "#ffafd7")
    ("11011100" "Υ" "#ffafff")
    ("11011011" "Φ" "#ffd700")
    ("11011101" "Χ" "#ffd75f")
    ("11011110" "Ψ" "#ffd787")
    ("11011111" "Ω" "#ffd7af")
    ("11100000" "α" "#ffd7d7")
    ("11100001" "β" "#ffd7ff")
    ("11100010" "γ" "#ffff00")
    ("11100100" "δ" "#ffff5f")
    ("11100011" "ε" "#ffff87")
    ("11100101" "ζ" "#ffffaf")
    ("11100110" "η" "#ffffd7")
    ("11100111" "θ" "#ffffff")
    ("11101000" "ι" "#080808")
    ("11101001" "κ" "#121212")
    ("11101010" "λ" "#1c1c1c")
    ("11101100" "μ" "#262626")
    ("11101011" "ν" "#303030")
    ("11101101" "ξ" "#3a3a3a")
    ("11101110" "ο" "#444444")
    ("11101111" "π" "#4e4e4e")
    ("11110000" "ρ" "#585858")
    ("11110001" "σ" "#606060")
    ("11110010" "τ" "#666666")
    ("11110100" "υ" "#767676")
    ("11110011" "φ" "#808080")
    ("11110101" "χ" "#8a8a8a")
    ("11110110" "ψ" "#949494")
    ("11110111" "ω" "#9e9e9e")
    ("11111000" "☀" "#a8a8a8")
    ("11111001" "☈" "#b2b2b2")
    ("11111010" "☉" "#bcbcbc")
    ("11111100" "☼" "#c6c6c6")
    ("11111011" "☽" "#d0d0d0")
    ("11111101" "☾" "#dadada")
    ("11111110" "☿" "#e4e4e4")
    ("11111111" "♀" "#eeeeee")))

(defun random-sigil ()
  (second (nth (random 256) truth-table-8)))

(defun random-sigil-string (len)
  (let ((res ""))
    (dotimes (i len) (setq res (concat res (random-sigil))))
    res))

(defun get-genotype-from-sigil (sig)
  (car (member-if (lambda (elt) (string= (second elt) sig)) truth-table-8)))

(defun get-genotype-from-rule (rule)
  (car (member-if (lambda (elt) (string= (first elt) rule)) truth-table-8)))

(defun get-sigil-from-rule (rule)
  (second (car (member-if (lambda (elt) (string= (first elt) rule)) truth-table-8))))

(defun evolve-sigil (sig &optional pred next)
  (let* ((p (if pred (first (get-genotype-from-sigil pred))
	      (first (get-genotype-from-sigil "!"))))
	 (s (first (get-genotype-from-sigil sig)))
	 (n (if next (first (get-genotype-from-sigil next))
	      (first (get-genotype-from-sigil "!"))))
	 (s-ints (map 'list (lambda (a) (string-to-int (char-to-string a))) s))
	 (local-rule (mapcar* #'list truth-table-3 s-ints))
	 (local-data (map 'list (lambda (a b c) (concat (char-to-string a)
							(char-to-string b)
							(char-to-string c)))
			  p s n))
	 (output ""))
    ;; combine the results...
    (mapc (lambda (num) (setq output (concat output (int-to-string num))))
	  ;; of looking up each element of the local data according to the local rule
	  (map 'list (lambda (data)
		       (second (car (member-if (lambda (elt) (string= (first elt) data))
					       local-rule))))
	       local-data))
    (get-genotype-from-rule output)))

; (evolve-sigil "«" "Å" "«") ;=> ("01101110" "Å" "#87afd7")

(defun evolve-sigil-with-blending (sig &optional pred next)
  (let* ((p (if pred (first (get-genotype-from-sigil pred))
	      (first (get-genotype-from-sigil "!"))))
	 (s (first (get-genotype-from-sigil sig)))
	 (n (if next (first (get-genotype-from-sigil next))
	      (first (get-genotype-from-sigil "!"))))
	 (s-ints (map 'list (lambda (a) (string-to-int (char-to-string a))) s))
	 (local-rule (mapcar* #'list truth-table-3 s-ints))
	 (local-data (map 'list (lambda (a b c) (concat (char-to-string a)
							(char-to-string b)
							(char-to-string c)))
			  p s n))
	 (output ""))
    ;; combine the results...
    (mapc (lambda (num) (setq output (concat output (int-to-string num))))
	  ;; of first looking at blends and then defaulting to looking
	  ;; up each element of the local data according to the local rule
	  (map 'list (lambda (data)
		       (cond 
			((and (string= (substring data 0 1) "0")
			      (string= (substring data 2 3) "0"))
			 0)
			((and (string= (substring data 0 1) "1")
			      (string= (substring data 2 3) "1"))
			 1)
			(t
			 (second (car (member-if (lambda (elt)
						   (string= (first elt) data))
						 local-rule))))))
	       local-data))
    (get-genotype-from-rule output))) 

;; Here's a test case to prove that the results of the two operations
;; are different:

; (get-sigil-from-rule "01010100") "©"
; (get-sigil-from-rule "01101110") "Å"
; (get-sigil-from-rule "01010101") "«"

; (evolve-sigil "©" "Å" "«") ;=> ("00101011" "Z" "#00d7d7")

; (evolve-sigil-with-blending "©" "Å" "«");=> ("01101111" "Æ" "#87afff")


(defalias 'evolve-sigil-fn 'evolve-sigil-with-blending)

(defun evolve-string (str)
  (let* ((letters (map 'list #'char-to-string (string-to-list str)))
	 (head (evolve-sigil-fn (first letters)
			     "!"
			     (or (second letters) "!")))
	 (tail (evolve-sigil-fn (car (last letters))
			     (or (nth (- (length letters) 2) letters)
				 "!")
			     "!")))
    (concat (second head)
	   (map 'string (lambda (mid pred next) 
			  (string-to-char (second (evolve-sigil-fn mid pred next))))
		(butlast (cdr letters) 1)
		(butlast letters 2)
		(cddr letters))
	   (second tail))))

; (evolve-string "nÆÖxιÇfèŮ´Ů8ýÕê☽§¨ïÂ©8µ1γ¬Nõτaú☽jUôβαùèó")

(defun run-for-generations (str n)
  (let ((gens (list str)))
    (dotimes (j n) (setq gens (nconc gens (list (evolve-string (car (last gens)))))))
    gens))

(defun print-space-time (str n)
  (pop-to-buffer (get-buffer-create "*spacetime*"))
  (fundamental-mode)
  (erase-buffer)
  (insert (concat "P3" "\n"))
  (insert (concat "# " str "\n"))
  (insert (concat (int-to-string (length str)) " " (int-to-string n) "\n"))
  (insert "255\n")
  ;; for all time
  (mapc (lambda (era)
	  ;; for all space
	  (mapc (lambda (elt)
		  ;; insert relevant RGB triple
		  (mapc (lambda (num)
			  (insert (concat (int-to-string num) " ")))
			(hexrgb-hex-to-color-values
			 (third
			  (car (member-if (lambda (a)
					    (string= (char-to-string elt)
						     (second a)))
					  truth-table-8)))))
		  (insert " "))
		era)
	  (insert "\n"))
	(run-for-generations str n))
  (goto-char (point-max))
  (insert (concat "\n"))
  (image-mode))

(defun multiverse-files (m n)
  (dotimes (j m)
    (let ((jth (format "%03d" (1+ j))))
      (print-space-time (random-sigil-string n) n)
      (write-file (concat "~/time" jth ".ppm"))
      (kill-buffer)
      (shell-command (concat
		      "convert -scale 1000 time" jth ".ppm st" jth ".ppm"))))
  (shell-command "montage -adjoin st*.ppm times.ppm"))

; (multiverse-files 12 40)

;;; end 256ca.el
